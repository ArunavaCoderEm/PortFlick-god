generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String   @unique
  adminCode String   @unique
  createdAt DateTime @default(now())
}

model User {
  id       String  @id @default(cuid())
  username String  @unique
  email    String  @unique
  phone    String  @unique
  avatar   String? @default("https://placehold.co/400")
  clerkid  String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userPortfolios Portfolios[]

  @@map("UsersDetails")
}

model Portfolios {
  id          String   @id @default(cuid())
  portfolioId String   @unique
  templateId  String
  template    Template @relation(fields: [templateId], references: [templateId], onDelete: Restrict, onUpdate: Cascade)
  name        String
  resume      String?
  description String?
  education   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username     String
  owner        User           @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  projects     Projects[]
  experiences  Experience[]
  skills       Skills[]
  testimonials Testimonials[]
  sociallinks  SocialLinks[]
}

model Projects {
  id           String       @id @default(uuid())
  projectId    String       @unique
  title        String
  imageUrl     String?
  demoUrl      String?
  desc         String?
  technologies String[]     @default([])
  type         TypeProps
  status       StatusProps?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  portfolioId  String
  Portfoliomap Portfolios @relation(fields: [portfolioId], references: [portfolioId], onDelete: Cascade, onUpdate: Cascade)
}

model Experience {
  id           String  @id @default(cuid())
  experienceId String  @unique
  companyName  String
  jobType      JobType
  startDate    String
  endDate      String  @default("Present")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  portfolioId String
  portfolio   Portfolios @relation(fields: [portfolioId], references: [portfolioId], onDelete: Cascade, onUpdate: Cascade)
}

model Skills {
  id          String  @id @default(cuid())
  skillId     String  @unique
  name        String
  image       String
  description String?
  proficiency Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  portfolioId String
  portfolio   Portfolios @relation(fields: [portfolioId], references: [portfolioId], onDelete: Cascade, onUpdate: Cascade)
}

model Testimonials {
  id            String  @id @default(cuid())
  testimonialId String  @unique
  name          String
  message       String
  position      String?
  avatar        String?

  portfolioId String
  portfolio   Portfolios @relation(fields: [portfolioId], references: [portfolioId], onDelete: Cascade, onUpdate: Cascade)
}

model SocialLinks {
  id       String         @id @default(cuid())
  socialId String         @unique
  platform SocialPlatform
  url      String

  portfolioId String
  portfolio   Portfolios @relation(fields: [portfolioId], references: [portfolioId], onDelete: Cascade, onUpdate: Cascade)
}

model Template {
  id             String         @id @default(cuid())
  name           String         @unique
  templateId     String         @unique
  previewUrl     String?
  portfolioStyle PortfolioStyle
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())

  portfolios Portfolios[]
}

enum JobType {
  FullTime
  PartTime
  Hybrid
  Intern
}

enum TypeProps {
  Personal
  SAAS
}

enum StatusProps {
  Active
  Pending
  Completed
}

enum SocialPlatform {
  GitHub
  LinkedIn
  Twitter
  Instagram
  Facebook
}

enum PortfolioStyle {
  Minimalist
  Modern
  Creative
  Professional
}
